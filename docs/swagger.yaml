basePath: /
definitions:
  models.Car:
    properties:
      brand:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      engine:
        $ref: '#/definitions/models.Engine'
      fuel_type:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      registration_number:
        type: string
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      year:
        type: string
    type: object
  models.CarRequest:
    properties:
      brand:
        type: string
      engine:
        $ref: '#/definitions/models.Engine'
      fuel_type:
        type: string
      name:
        type: string
      price:
        type: number
      registration_number:
        type: string
      status:
        type: string
      year:
        type: string
    type: object
  models.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Driver:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      driver_license_number:
        type: string
      id:
        type: string
      license_expiry:
        description: e.g., 2025-12-31T23:59:59Z
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Embedding the User struct to access user information like name,
          email, etc.
      user_id:
        description: Reference to the User model
        type: string
    type: object
  models.DriverRequest:
    properties:
      driver_license_number:
        type: string
      license_expiry:
        type: string
      user_id:
        type: string
    type: object
  models.Engine:
    properties:
      car_range:
        type: integer
      displacement:
        type: integer
      engine_id:
        type: string
      no_of_cylinders:
        type: integer
    type: object
  models.EngineRequest:
    properties:
      car_range:
        type: integer
      displacement:
        type: integer
      no_of_cylinders:
        type: integer
    type: object
  models.Trip:
    properties:
      car_id:
        description: Reference to the Car model
        type: string
      created_at:
        description: Record creation timestamp
        type: string
      created_by:
        description: User who created the record
        type: string
      description:
        type: string
      distance_km:
        description: Distance covered in kilometers
        type: number
      driver_id:
        description: Reference to the Driver model
        type: string
      end_location:
        description: Destination of the trip
        type: string
      end_time:
        description: Trip end time (nullable if still ongoing)
        type: string
      fuel_consumed_liters:
        description: Fuel consumed in liters
        type: number
      id:
        description: Unique trip identifier
        type: string
      start_location:
        description: Starting point of the trip
        type: string
      start_time:
        description: Trip start time
        type: string
      status:
        description: Trip status (e.g., Completed, In Progress, Cancelled, Draft,
          Scheduled)
        type: string
      updated_at:
        description: Record last update timestamp
        type: string
      updated_by:
        description: User who last updated the record
        type: string
    type: object
  models.TripRequest:
    properties:
      car_id:
        type: string
      description:
        type: string
      distance_km:
        type: number
      driver_id:
        type: string
      end_location:
        type: string
      end_time:
        type: string
      fuel_consumed_liters:
        type: number
      start_location:
        type: string
      start_time:
        type: string
      status:
        type: string
    type: object
  models.UpdatePasswordRequest:
    properties:
      confirm_password:
        type: string
      password:
        type: string
      previous_password:
        type: string
    type: object
  models.User:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  models.UserRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API documentation for the car management system.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Car Management System API
  version: "1.0"
paths:
  /api/v1/cars:
    get:
      consumes:
      - application/json
      description: Get cars by brand
      parameters:
      - description: Car Brand
        in: query
        name: brand
        required: true
        type: string
      - description: Car with Engine
        in: query
        name: isEngine
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Car'
            type: array
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Car not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get cars by brand
      tags:
      - Car
    post:
      consumes:
      - application/json
      description: Create a new car
      parameters:
      - description: Car Request
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/models.CarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Car'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new car
      tags:
      - Car
  /api/v1/cars/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a car
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a car
      tags:
      - Car
    get:
      consumes:
      - application/json
      description: Get a car by its ID
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Car not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get car by ID
      tags:
      - Car
    put:
      consumes:
      - application/json
      description: Update a car
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      - description: Car Request
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/models.CarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a car
      tags:
      - Car
  /api/v1/drivers:
    get:
      consumes:
      - application/json
      description: Get all drivers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Driver'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all drivers
      tags:
      - Driver
    post:
      consumes:
      - application/json
      description: Create a new driver
      parameters:
      - description: Driver object that needs to be created
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/models.DriverRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Driver'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create driver
      tags:
      - Driver
  /api/v1/drivers/{id}:
    delete:
      consumes:
      - application/json
      description: Soft Delete driver by ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Driver'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Driver not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Soft Delete driver
      tags:
      - Driver
    get:
      consumes:
      - application/json
      description: Get driver profile by ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Driver'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Driver not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get driver profile
      tags:
      - Driver
    put:
      consumes:
      - application/json
      description: Update driver profile by ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      - description: Driver object that needs to be updated
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/models.DriverRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Driver'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Driver not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update driver profile
      tags:
      - Driver
  /api/v1/drivers/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete driver by ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Driver'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Driver not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete driver
      tags:
      - Driver
  /api/v1/drivers/{id}/toggle-status:
    put:
      consumes:
      - application/json
      description: Toggle driver status by ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      - description: Active status
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Driver'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Driver not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Toggle driver status
      tags:
      - Driver
  /api/v1/engines:
    post:
      consumes:
      - application/json
      description: Create a new engine
      parameters:
      - description: Engine details
        in: body
        name: engine
        required: true
        schema:
          $ref: '#/definitions/models.EngineRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Engine'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new engine
      tags:
      - Engine
  /api/v1/engines/{id}:
    delete:
      consumes:
      - application/json
      description: Delete engine by ID
      parameters:
      - description: Engine ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Engine'
        "404":
          description: Engine not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete engine by ID
      tags:
      - Engine
    get:
      consumes:
      - application/json
      description: Get engine by ID
      parameters:
      - description: Engine ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Engine'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Engine not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get engine by ID
      tags:
      - Engine
    put:
      consumes:
      - application/json
      description: Update engine by ID
      parameters:
      - description: Engine ID
        in: path
        name: id
        required: true
        type: string
      - description: Engine details
        in: body
        name: engine
        required: true
        schema:
          $ref: '#/definitions/models.EngineRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Engine'
        "400":
          description: Invalid ID or request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update engine by ID
      tags:
      - Engine
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Validates user credentials and returns a JWT token on success
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Authenticate user and generate a JWT token
      tags:
      - Authentication
  /api/v1/trips:
    post:
      consumes:
      - application/json
      description: Create a new trip
      parameters:
      - description: Trip Request
        in: body
        name: trip
        required: true
        schema:
          $ref: '#/definitions/models.TripRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new trip
      tags:
      - Trip
  /api/v1/trips/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a trip
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a trip
      tags:
      - Trip
    get:
      consumes:
      - application/json
      description: Get a trip by its ID
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Trip not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get trip by ID
      tags:
      - Trip
    put:
      consumes:
      - application/json
      description: Update a trip
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: string
      - description: Trip Request
        in: body
        name: trip
        required: true
        schema:
          $ref: '#/definitions/models.TripRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a trip
      tags:
      - Trip
  /api/v1/trips/{id}/toggle-status:
    put:
      consumes:
      - application/json
      description: Toggle trip status by ID
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: string
      - description: Active status
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Trip not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Toggle trip status
      tags:
      - Trip
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create user
      tags:
      - User
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update user profile
      tags:
      - User
  /api/v1/users/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - User
  /api/v1/users/{id}/toggle-status:
    put:
      consumes:
      - application/json
      description: Toggle user status by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Active status
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Toggle user status
      tags:
      - User
  /api/v1/users/{id}/update-password:
    put:
      consumes:
      - application/json
      description: Update user password by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update user password
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
